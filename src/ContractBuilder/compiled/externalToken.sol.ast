PragmaDirective
   Source: "pragma solidity ^0.4.9;"
ImportDirective "./erc20Token.sol"
   Source: "import \"./erc20Token.sol\";"
ContractDefinition "ExternalToken"
   Source: "contract ExternalToken is ERC20Token {\r\n\r\n  address private _issuer;\r\n\r\n  function ExternalToken(address issuer) {\r\n    _issuer = issuer;\r\n    accounts [_issuer] = MAX_UINT256;\r\n  }\r\n\r\n  function totalSupply () constant returns (uint256 supply) {\r\n    return safeSub (MAX_UINT256, accounts [_issuer]);\r\n  }\r\n\r\n  function balanceOf (address _owner) constant returns (uint256 balance) {\r\n    return _owner == _issuer ? 0 : ERC20Token.balanceOf (_owner);\r\n  }\r\n}"
  InheritanceSpecifier
     Source: "ERC20Token"
    UserDefinedTypeName "ERC20Token"
       Source: "ERC20Token"
  VariableDeclaration "_issuer"
     Type: address
     Source: "address private _issuer"
    ElementaryTypeName address
       Source: "address"
  FunctionDefinition "ExternalToken" - public
     Source: "function ExternalToken(address issuer) {\r\n    _issuer = issuer;\r\n    accounts [_issuer] = MAX_UINT256;\r\n  }"
    ParameterList
       Source: "(address issuer)"
      VariableDeclaration "issuer"
         Type: address
         Source: "address issuer"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: ""
    Block
       Source: "{\r\n    _issuer = issuer;\r\n    accounts [_issuer] = MAX_UINT256;\r\n  }"
      ExpressionStatement
         Source: "_issuer = issuer"
        Assignment using operator =
           Type: address
           Source: "_issuer = issuer"
          Identifier _issuer
             Type: address
             Source: "_issuer"
          Identifier issuer
             Type: address
             Source: "issuer"
      ExpressionStatement
         Source: "accounts [_issuer] = MAX_UINT256"
        Assignment using operator =
           Type: uint256
           Source: "accounts [_issuer] = MAX_UINT256"
          IndexAccess
             Type: uint256
             Source: "accounts [_issuer]"
            Identifier accounts
               Type: mapping(address => uint256)
               Source: "accounts"
            Identifier _issuer
               Type: address
               Source: "_issuer"
          Identifier MAX_UINT256
             Type: uint256
             Source: "MAX_UINT256"
  FunctionDefinition "totalSupply" - public - const
     Source: "function totalSupply () constant returns (uint256 supply) {\r\n    return safeSub (MAX_UINT256, accounts [_issuer]);\r\n  }"
    ParameterList
       Source: "()"
    ParameterList
       Source: "(uint256 supply)"
      VariableDeclaration "supply"
         Type: uint256
         Source: "uint256 supply"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n    return safeSub (MAX_UINT256, accounts [_issuer]);\r\n  }"
      Return
         Source: "return safeSub (MAX_UINT256, accounts [_issuer])"
        FunctionCall
           Type: uint256
           Source: "safeSub (MAX_UINT256, accounts [_issuer])"
          Identifier safeSub
             Type: function (uint256,uint256) constant returns (uint256)
             Source: "safeSub"
          Identifier MAX_UINT256
             Type: uint256
             Source: "MAX_UINT256"
          IndexAccess
             Type: uint256
             Source: "accounts [_issuer]"
            Identifier accounts
               Type: mapping(address => uint256)
               Source: "accounts"
            Identifier _issuer
               Type: address
               Source: "_issuer"
  FunctionDefinition "balanceOf" - public - const
     Source: "function balanceOf (address _owner) constant returns (uint256 balance) {\r\n    return _owner == _issuer ? 0 : ERC20Token.balanceOf (_owner);\r\n  }"
    ParameterList
       Source: "(address _owner)"
      VariableDeclaration "_owner"
         Type: address
         Source: "address _owner"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: "(uint256 balance)"
      VariableDeclaration "balance"
         Type: uint256
         Source: "uint256 balance"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n    return _owner == _issuer ? 0 : ERC20Token.balanceOf (_owner);\r\n  }"
      Return
         Source: "return _owner == _issuer ? 0 : ERC20Token.balanceOf (_owner)"
        Conditional
           Type: uint256
           Source: "_owner == _issuer ? 0 : ERC20Token.balanceOf (_owner)"
          BinaryOperation using operator ==
             Type: bool
             Source: "_owner == _issuer"
            Identifier _owner
               Type: address
               Source: "_owner"
            Identifier _issuer
               Type: address
               Source: "_issuer"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
          FunctionCall
             Type: uint256
             Source: "ERC20Token.balanceOf (_owner)"
            MemberAccess to member balanceOf
               Type: function (address) constant returns (uint256)
               Source: "ERC20Token.balanceOf"
              Identifier ERC20Token
                 Type: type(contract ERC20Token)
                 Source: "ERC20Token"
            Identifier _owner
               Type: address
               Source: "_owner"
