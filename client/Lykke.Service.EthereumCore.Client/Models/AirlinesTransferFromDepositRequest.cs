// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Lykke.Service.EthereumCore.Client.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class AirlinesTransferFromDepositRequest
    {
        /// <summary>
        /// Initializes a new instance of the
        /// AirlinesTransferFromDepositRequest class.
        /// </summary>
        public AirlinesTransferFromDepositRequest()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// AirlinesTransferFromDepositRequest class.
        /// </summary>
        public AirlinesTransferFromDepositRequest(string depositAddress = default(string), string tokenAddress = default(string), string destinationAddress = default(string), string tokenAmount = default(string))
        {
            DepositAddress = depositAddress;
            TokenAddress = tokenAddress;
            DestinationAddress = destinationAddress;
            TokenAmount = tokenAmount;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "depositAddress")]
        public string DepositAddress { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "tokenAddress")]
        public string TokenAddress { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "destinationAddress")]
        public string DestinationAddress { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "tokenAmount")]
        public string TokenAmount { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (TokenAmount != null)
            {
                if (!System.Text.RegularExpressions.Regex.IsMatch(TokenAmount, "^[1-9][0-9]*$"))
                {
                    throw new ValidationException(ValidationRules.Pattern, "TokenAmount", "^[1-9][0-9]*$");
                }
            }
        }
    }
}
