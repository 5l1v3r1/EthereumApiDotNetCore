// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace EthereumSamuraiApiCaller.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class Erc20TransferHistoryResponse
    {
        /// <summary>
        /// Initializes a new instance of the Erc20TransferHistoryResponse
        /// class.
        /// </summary>
        public Erc20TransferHistoryResponse()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Erc20TransferHistoryResponse
        /// class.
        /// </summary>
        public Erc20TransferHistoryResponse(long blockNumber, long blockTimestamp, int logIndex, int transactionIndex, string gasUsed, string gasPrice, string blockHash = default(string), string contract = default(string), string fromProperty = default(string), string to = default(string), string transactionHash = default(string), string transferAmount = default(string))
        {
            BlockHash = blockHash;
            BlockNumber = blockNumber;
            BlockTimestamp = blockTimestamp;
            Contract = contract;
            FromProperty = fromProperty;
            LogIndex = logIndex;
            To = to;
            TransactionHash = transactionHash;
            TransactionIndex = transactionIndex;
            TransferAmount = transferAmount;
            GasUsed = gasUsed;
            GasPrice = gasPrice;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "blockHash")]
        public string BlockHash { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "blockNumber")]
        public long BlockNumber { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "blockTimestamp")]
        public long BlockTimestamp { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "contract")]
        public string Contract { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "from")]
        public string FromProperty { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "logIndex")]
        public int LogIndex { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "to")]
        public string To { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "transactionHash")]
        public string TransactionHash { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "transactionIndex")]
        public int TransactionIndex { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "transferAmount")]
        public string TransferAmount { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "gasUsed")]
        public string GasUsed { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "gasPrice")]
        public string GasPrice { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (GasUsed == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "GasUsed");
            }
            if (GasPrice == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "GasPrice");
            }
        }
    }
}
