PragmaDirective
   Source: "pragma solidity ^0.4.9;"
ImportDirective "./erc20Contract.sol"
   Source: "import \"./erc20Contract.sol\";"
ImportDirective "./safeMath.sol"
   Source: "import \"./safeMath.sol\";"
ContractDefinition "ERC20Token"
   Source: "contract ERC20Token is ERC20Interface, SafeMath {\r\n\r\n  function ERC20Token () {\r\n  }\r\n\r\n  function balanceOf (address _owner) constant returns (uint256 balance) {\r\n    return accounts [_owner];\r\n  }\r\n\r\n  function transfer (address _to, uint256 _value) returns (bool success) {\r\n    if (accounts [msg.sender] < _value) return false;\r\n    if (_value > 0 && msg.sender != _to) {\r\n      accounts [msg.sender] = safeSub (accounts [msg.sender], _value);\r\n      accounts [_to] = safeAdd (accounts [_to], _value);\r\n      Transfer (msg.sender, _to, _value);\r\n    }\r\n    return true;\r\n  }\r\n\r\n  function transferFrom (address _from, address _to, uint256 _value)\r\n  returns (bool success) {\r\n    if (allowances [_from][msg.sender] < _value) return false;\r\n    if (accounts [_from] < _value) return false;\r\n\r\n    allowances [_from][msg.sender] =\r\n      safeSub (allowances [_from][msg.sender], _value);\r\n\r\n    if (_value > 0 && _from != _to) {\r\n      accounts [_from] = safeSub (accounts [_from], _value);\r\n      accounts [_to] = safeAdd (accounts [_to], _value);\r\n      Transfer (_from, _to, _value);\r\n    }\r\n    return true;\r\n  }\r\n\r\n  function approve (address _spender, uint256 _value) returns (bool success) {\r\n    allowances [msg.sender][_spender] = _value;\r\n    Approval (msg.sender, _spender, _value);\r\n\r\n    return true;\r\n  }\r\n\r\n  function allowance (address _owner, address _spender) constant\r\n  returns (uint256 remaining) {\r\n    return allowances [_owner][_spender];\r\n  }\r\n\r\n  mapping (address => uint256) accounts;\r\n  mapping (address => mapping (address => uint256)) private allowances;\r\n}"
  InheritanceSpecifier
     Source: "ERC20Interface"
    UserDefinedTypeName "ERC20Interface"
       Source: "ERC20Interface"
  InheritanceSpecifier
     Source: "SafeMath"
    UserDefinedTypeName "SafeMath"
       Source: "SafeMath"
  FunctionDefinition "ERC20Token" - public
     Source: "function ERC20Token () {\r\n  }"
    ParameterList
       Source: "()"
    ParameterList
       Source: ""
    Block
       Source: "{\r\n  }"
  FunctionDefinition "balanceOf" - public - const
     Source: "function balanceOf (address _owner) constant returns (uint256 balance) {\r\n    return accounts [_owner];\r\n  }"
    ParameterList
       Source: "(address _owner)"
      VariableDeclaration "_owner"
         Type: address
         Source: "address _owner"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: "(uint256 balance)"
      VariableDeclaration "balance"
         Type: uint256
         Source: "uint256 balance"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n    return accounts [_owner];\r\n  }"
      Return
         Source: "return accounts [_owner]"
        IndexAccess
           Type: uint256
           Source: "accounts [_owner]"
          Identifier accounts
             Type: mapping(address => uint256)
             Source: "accounts"
          Identifier _owner
             Type: address
             Source: "_owner"
  FunctionDefinition "transfer" - public
     Source: "function transfer (address _to, uint256 _value) returns (bool success) {\r\n    if (accounts [msg.sender] < _value) return false;\r\n    if (_value > 0 && msg.sender != _to) {\r\n      accounts [msg.sender] = safeSub (accounts [msg.sender], _value);\r\n      accounts [_to] = safeAdd (accounts [_to], _value);\r\n      Transfer (msg.sender, _to, _value);\r\n    }\r\n    return true;\r\n  }"
    ParameterList
       Source: "(address _to, uint256 _value)"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\r\n    if (accounts [msg.sender] < _value) return false;\r\n    if (_value > 0 && msg.sender != _to) {\r\n      accounts [msg.sender] = safeSub (accounts [msg.sender], _value);\r\n      accounts [_to] = safeAdd (accounts [_to], _value);\r\n      Transfer (msg.sender, _to, _value);\r\n    }\r\n    return true;\r\n  }"
      IfStatement
         Source: "if (accounts [msg.sender] < _value) return false"
        BinaryOperation using operator <
           Type: bool
           Source: "accounts [msg.sender] < _value"
          IndexAccess
             Type: uint256
             Source: "accounts [msg.sender]"
            Identifier accounts
               Type: mapping(address => uint256)
               Source: "accounts"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
          Identifier _value
             Type: uint256
             Source: "_value"
        Return
           Source: "return false"
          Literal, token: false value: false
             Type: bool
             Source: "false"
      IfStatement
         Source: "if (_value > 0 && msg.sender != _to) {\r\n      accounts [msg.sender] = safeSub (accounts [msg.sender], _value);\r\n      accounts [_to] = safeAdd (accounts [_to], _value);\r\n      Transfer (msg.sender, _to, _value);\r\n    }"
        BinaryOperation using operator &&
           Type: bool
           Source: "_value > 0 && msg.sender != _to"
          BinaryOperation using operator >
             Type: bool
             Source: "_value > 0"
            Identifier _value
               Type: uint256
               Source: "_value"
            Literal, token: [no token] value: 0
               Type: int_const 0
               Source: "0"
          BinaryOperation using operator !=
             Type: bool
             Source: "msg.sender != _to"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
            Identifier _to
               Type: address
               Source: "_to"
        Block
           Source: "{\r\n      accounts [msg.sender] = safeSub (accounts [msg.sender], _value);\r\n      accounts [_to] = safeAdd (accounts [_to], _value);\r\n      Transfer (msg.sender, _to, _value);\r\n    }"
          ExpressionStatement
             Source: "accounts [msg.sender] = safeSub (accounts [msg.sender], _value)"
            Assignment using operator =
               Type: uint256
               Source: "accounts [msg.sender] = safeSub (accounts [msg.sender], _value)"
              IndexAccess
                 Type: uint256
                 Source: "accounts [msg.sender]"
                Identifier accounts
                   Type: mapping(address => uint256)
                   Source: "accounts"
                MemberAccess to member sender
                   Type: address
                   Source: "msg.sender"
                  Identifier msg
                     Type: msg
                     Source: "msg"
              FunctionCall
                 Type: uint256
                 Source: "safeSub (accounts [msg.sender], _value)"
                Identifier safeSub
                   Type: function (uint256,uint256) constant returns (uint256)
                   Source: "safeSub"
                IndexAccess
                   Type: uint256
                   Source: "accounts [msg.sender]"
                  Identifier accounts
                     Type: mapping(address => uint256)
                     Source: "accounts"
                  MemberAccess to member sender
                     Type: address
                     Source: "msg.sender"
                    Identifier msg
                       Type: msg
                       Source: "msg"
                Identifier _value
                   Type: uint256
                   Source: "_value"
          ExpressionStatement
             Source: "accounts [_to] = safeAdd (accounts [_to], _value)"
            Assignment using operator =
               Type: uint256
               Source: "accounts [_to] = safeAdd (accounts [_to], _value)"
              IndexAccess
                 Type: uint256
                 Source: "accounts [_to]"
                Identifier accounts
                   Type: mapping(address => uint256)
                   Source: "accounts"
                Identifier _to
                   Type: address
                   Source: "_to"
              FunctionCall
                 Type: uint256
                 Source: "safeAdd (accounts [_to], _value)"
                Identifier safeAdd
                   Type: function (uint256,uint256) constant returns (uint256)
                   Source: "safeAdd"
                IndexAccess
                   Type: uint256
                   Source: "accounts [_to]"
                  Identifier accounts
                     Type: mapping(address => uint256)
                     Source: "accounts"
                  Identifier _to
                     Type: address
                     Source: "_to"
                Identifier _value
                   Type: uint256
                   Source: "_value"
          ExpressionStatement
             Source: "Transfer (msg.sender, _to, _value)"
            FunctionCall
               Type: tuple()
               Source: "Transfer (msg.sender, _to, _value)"
              Identifier Transfer
                 Type: function (address,address,uint256) constant
                 Source: "Transfer"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
              Identifier _to
                 Type: address
                 Source: "_to"
              Identifier _value
                 Type: uint256
                 Source: "_value"
      Return
         Source: "return true"
        Literal, token: true value: true
           Type: bool
           Source: "true"
  FunctionDefinition "transferFrom" - public
     Source: "function transferFrom (address _from, address _to, uint256 _value)\r\n  returns (bool success) {\r\n    if (allowances [_from][msg.sender] < _value) return false;\r\n    if (accounts [_from] < _value) return false;\r\n\r\n    allowances [_from][msg.sender] =\r\n      safeSub (allowances [_from][msg.sender], _value);\r\n\r\n    if (_value > 0 && _from != _to) {\r\n      accounts [_from] = safeSub (accounts [_from], _value);\r\n      accounts [_to] = safeAdd (accounts [_to], _value);\r\n      Transfer (_from, _to, _value);\r\n    }\r\n    return true;\r\n  }"
    ParameterList
       Source: "(address _from, address _to, uint256 _value)"
      VariableDeclaration "_from"
         Type: address
         Source: "address _from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\r\n    if (allowances [_from][msg.sender] < _value) return false;\r\n    if (accounts [_from] < _value) return false;\r\n\r\n    allowances [_from][msg.sender] =\r\n      safeSub (allowances [_from][msg.sender], _value);\r\n\r\n    if (_value > 0 && _from != _to) {\r\n      accounts [_from] = safeSub (accounts [_from], _value);\r\n      accounts [_to] = safeAdd (accounts [_to], _value);\r\n      Transfer (_from, _to, _value);\r\n    }\r\n    return true;\r\n  }"
      IfStatement
         Source: "if (allowances [_from][msg.sender] < _value) return false"
        BinaryOperation using operator <
           Type: bool
           Source: "allowances [_from][msg.sender] < _value"
          IndexAccess
             Type: uint256
             Source: "allowances [_from][msg.sender]"
            IndexAccess
               Type: mapping(address => uint256)
               Source: "allowances [_from]"
              Identifier allowances
                 Type: mapping(address => mapping(address => uint256))
                 Source: "allowances"
              Identifier _from
                 Type: address
                 Source: "_from"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
          Identifier _value
             Type: uint256
             Source: "_value"
        Return
           Source: "return false"
          Literal, token: false value: false
             Type: bool
             Source: "false"
      IfStatement
         Source: "if (accounts [_from] < _value) return false"
        BinaryOperation using operator <
           Type: bool
           Source: "accounts [_from] < _value"
          IndexAccess
             Type: uint256
             Source: "accounts [_from]"
            Identifier accounts
               Type: mapping(address => uint256)
               Source: "accounts"
            Identifier _from
               Type: address
               Source: "_from"
          Identifier _value
             Type: uint256
             Source: "_value"
        Return
           Source: "return false"
          Literal, token: false value: false
             Type: bool
             Source: "false"
      ExpressionStatement
         Source: "allowances [_from][msg.sender] =\r\n      safeSub (allowances [_from][msg.sender], _value)"
        Assignment using operator =
           Type: uint256
           Source: "allowances [_from][msg.sender] =\r\n      safeSub (allowances [_from][msg.sender], _value)"
          IndexAccess
             Type: uint256
             Source: "allowances [_from][msg.sender]"
            IndexAccess
               Type: mapping(address => uint256)
               Source: "allowances [_from]"
              Identifier allowances
                 Type: mapping(address => mapping(address => uint256))
                 Source: "allowances"
              Identifier _from
                 Type: address
                 Source: "_from"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
          FunctionCall
             Type: uint256
             Source: "safeSub (allowances [_from][msg.sender], _value)"
            Identifier safeSub
               Type: function (uint256,uint256) constant returns (uint256)
               Source: "safeSub"
            IndexAccess
               Type: uint256
               Source: "allowances [_from][msg.sender]"
              IndexAccess
                 Type: mapping(address => uint256)
                 Source: "allowances [_from]"
                Identifier allowances
                   Type: mapping(address => mapping(address => uint256))
                   Source: "allowances"
                Identifier _from
                   Type: address
                   Source: "_from"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
            Identifier _value
               Type: uint256
               Source: "_value"
      IfStatement
         Source: "if (_value > 0 && _from != _to) {\r\n      accounts [_from] = safeSub (accounts [_from], _value);\r\n      accounts [_to] = safeAdd (accounts [_to], _value);\r\n      Transfer (_from, _to, _value);\r\n    }"
        BinaryOperation using operator &&
           Type: bool
           Source: "_value > 0 && _from != _to"
          BinaryOperation using operator >
             Type: bool
             Source: "_value > 0"
            Identifier _value
               Type: uint256
               Source: "_value"
            Literal, token: [no token] value: 0
               Type: int_const 0
               Source: "0"
          BinaryOperation using operator !=
             Type: bool
             Source: "_from != _to"
            Identifier _from
               Type: address
               Source: "_from"
            Identifier _to
               Type: address
               Source: "_to"
        Block
           Source: "{\r\n      accounts [_from] = safeSub (accounts [_from], _value);\r\n      accounts [_to] = safeAdd (accounts [_to], _value);\r\n      Transfer (_from, _to, _value);\r\n    }"
          ExpressionStatement
             Source: "accounts [_from] = safeSub (accounts [_from], _value)"
            Assignment using operator =
               Type: uint256
               Source: "accounts [_from] = safeSub (accounts [_from], _value)"
              IndexAccess
                 Type: uint256
                 Source: "accounts [_from]"
                Identifier accounts
                   Type: mapping(address => uint256)
                   Source: "accounts"
                Identifier _from
                   Type: address
                   Source: "_from"
              FunctionCall
                 Type: uint256
                 Source: "safeSub (accounts [_from], _value)"
                Identifier safeSub
                   Type: function (uint256,uint256) constant returns (uint256)
                   Source: "safeSub"
                IndexAccess
                   Type: uint256
                   Source: "accounts [_from]"
                  Identifier accounts
                     Type: mapping(address => uint256)
                     Source: "accounts"
                  Identifier _from
                     Type: address
                     Source: "_from"
                Identifier _value
                   Type: uint256
                   Source: "_value"
          ExpressionStatement
             Source: "accounts [_to] = safeAdd (accounts [_to], _value)"
            Assignment using operator =
               Type: uint256
               Source: "accounts [_to] = safeAdd (accounts [_to], _value)"
              IndexAccess
                 Type: uint256
                 Source: "accounts [_to]"
                Identifier accounts
                   Type: mapping(address => uint256)
                   Source: "accounts"
                Identifier _to
                   Type: address
                   Source: "_to"
              FunctionCall
                 Type: uint256
                 Source: "safeAdd (accounts [_to], _value)"
                Identifier safeAdd
                   Type: function (uint256,uint256) constant returns (uint256)
                   Source: "safeAdd"
                IndexAccess
                   Type: uint256
                   Source: "accounts [_to]"
                  Identifier accounts
                     Type: mapping(address => uint256)
                     Source: "accounts"
                  Identifier _to
                     Type: address
                     Source: "_to"
                Identifier _value
                   Type: uint256
                   Source: "_value"
          ExpressionStatement
             Source: "Transfer (_from, _to, _value)"
            FunctionCall
               Type: tuple()
               Source: "Transfer (_from, _to, _value)"
              Identifier Transfer
                 Type: function (address,address,uint256) constant
                 Source: "Transfer"
              Identifier _from
                 Type: address
                 Source: "_from"
              Identifier _to
                 Type: address
                 Source: "_to"
              Identifier _value
                 Type: uint256
                 Source: "_value"
      Return
         Source: "return true"
        Literal, token: true value: true
           Type: bool
           Source: "true"
  FunctionDefinition "approve" - public
     Source: "function approve (address _spender, uint256 _value) returns (bool success) {\r\n    allowances [msg.sender][_spender] = _value;\r\n    Approval (msg.sender, _spender, _value);\r\n\r\n    return true;\r\n  }"
    ParameterList
       Source: "(address _spender, uint256 _value)"
      VariableDeclaration "_spender"
         Type: address
         Source: "address _spender"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\r\n    allowances [msg.sender][_spender] = _value;\r\n    Approval (msg.sender, _spender, _value);\r\n\r\n    return true;\r\n  }"
      ExpressionStatement
         Source: "allowances [msg.sender][_spender] = _value"
        Assignment using operator =
           Type: uint256
           Source: "allowances [msg.sender][_spender] = _value"
          IndexAccess
             Type: uint256
             Source: "allowances [msg.sender][_spender]"
            IndexAccess
               Type: mapping(address => uint256)
               Source: "allowances [msg.sender]"
              Identifier allowances
                 Type: mapping(address => mapping(address => uint256))
                 Source: "allowances"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
            Identifier _spender
               Type: address
               Source: "_spender"
          Identifier _value
             Type: uint256
             Source: "_value"
      ExpressionStatement
         Source: "Approval (msg.sender, _spender, _value)"
        FunctionCall
           Type: tuple()
           Source: "Approval (msg.sender, _spender, _value)"
          Identifier Approval
             Type: function (address,address,uint256) constant
             Source: "Approval"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier _spender
             Type: address
             Source: "_spender"
          Identifier _value
             Type: uint256
             Source: "_value"
      Return
         Source: "return true"
        Literal, token: true value: true
           Type: bool
           Source: "true"
  FunctionDefinition "allowance" - public - const
     Source: "function allowance (address _owner, address _spender) constant\r\n  returns (uint256 remaining) {\r\n    return allowances [_owner][_spender];\r\n  }"
    ParameterList
       Source: "(address _owner, address _spender)"
      VariableDeclaration "_owner"
         Type: address
         Source: "address _owner"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_spender"
         Type: address
         Source: "address _spender"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: "(uint256 remaining)"
      VariableDeclaration "remaining"
         Type: uint256
         Source: "uint256 remaining"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\r\n    return allowances [_owner][_spender];\r\n  }"
      Return
         Source: "return allowances [_owner][_spender]"
        IndexAccess
           Type: uint256
           Source: "allowances [_owner][_spender]"
          IndexAccess
             Type: mapping(address => uint256)
             Source: "allowances [_owner]"
            Identifier allowances
               Type: mapping(address => mapping(address => uint256))
               Source: "allowances"
            Identifier _owner
               Type: address
               Source: "_owner"
          Identifier _spender
             Type: address
             Source: "_spender"
  VariableDeclaration "accounts"
     Type: mapping(address => uint256)
     Source: "mapping (address => uint256) accounts"
    Mapping
       Source: "mapping (address => uint256)"
      ElementaryTypeName address
         Source: "address"
      ElementaryTypeName uint256
         Source: "uint256"
  VariableDeclaration "allowances"
     Type: mapping(address => mapping(address => uint256))
     Source: "mapping (address => mapping (address => uint256)) private allowances"
    Mapping
       Source: "mapping (address => mapping (address => uint256))"
      ElementaryTypeName address
         Source: "address"
      Mapping
         Source: "mapping (address => uint256)"
        ElementaryTypeName address
           Source: "address"
        ElementaryTypeName uint256
           Source: "uint256"
