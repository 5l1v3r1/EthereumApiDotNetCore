<<<<<<< HEAD
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
=======
// Code generated by Microsoft (R) AutoRest Code Generator 1.2.2.0
>>>>>>> Erc20 balance request added to Etherium Samurai API
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace EthereumSamuraiApiCaller
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for EthereumSamuraiApi.
    /// </summary>
    public static partial class EthereumSamuraiApiExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='address'>
            /// </param>
            /// <param name='startBlock'>
            /// </param>
            /// <param name='stopBlock'>
            /// </param>
            /// <param name='start'>
            /// </param>
            /// <param name='count'>
            /// </param>
            public static object ApiAddressHistoryByAddressGet(this IEthereumSamuraiApi operations, string address, long? startBlock = default(long?), long? stopBlock = default(long?), int? start = default(int?), int? count = default(int?))
            {
                return operations.ApiAddressHistoryByAddressGetAsync(address, startBlock, stopBlock, start, count).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='address'>
            /// </param>
            /// <param name='startBlock'>
            /// </param>
            /// <param name='stopBlock'>
            /// </param>
            /// <param name='start'>
            /// </param>
            /// <param name='count'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ApiAddressHistoryByAddressGetAsync(this IEthereumSamuraiApi operations, string address, long? startBlock = default(long?), long? stopBlock = default(long?), int? start = default(int?), int? count = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiAddressHistoryByAddressGetWithHttpMessagesAsync(address, startBlock, stopBlock, start, count, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='address'>
            /// </param>
            public static object ApiBalanceGetBalanceByAddressGet(this IEthereumSamuraiApi operations, string address)
            {
                return operations.ApiBalanceGetBalanceByAddressGetAsync(address).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='address'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ApiBalanceGetBalanceByAddressGetAsync(this IEthereumSamuraiApi operations, string address, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiBalanceGetBalanceByAddressGetWithHttpMessagesAsync(address, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
<<<<<<< HEAD
            /// <param name='request'>
            /// </param>
            /// <param name='start'>
            /// </param>
            /// <param name='count'>
            /// </param>
            public static object ApiErc20BalanceGetErc20BalancePost(this IEthereumSamuraiApi operations, GetErc20BalanceRequest request = default(GetErc20BalanceRequest), int? start = default(int?), int? count = default(int?))
            {
                return operations.ApiErc20BalanceGetErc20BalancePostAsync(request, start, count).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='start'>
            /// </param>
            /// <param name='count'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ApiErc20BalanceGetErc20BalancePostAsync(this IEthereumSamuraiApi operations, GetErc20BalanceRequest request = default(GetErc20BalanceRequest), int? start = default(int?), int? count = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiErc20BalanceGetErc20BalancePostWithHttpMessagesAsync(request, start, count, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
=======
>>>>>>> Erc20 balance request added to Etherium Samurai API
            /// <param name='address'>
            /// </param>
            /// <param name='contracts'>
            /// </param>
            public static object ApiErc20BalanceGetErc20BalanceByAddressPost(this IEthereumSamuraiApi operations, string address, IList<string> contracts = default(IList<string>))
            {
                return operations.ApiErc20BalanceGetErc20BalanceByAddressPostAsync(address, contracts).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='address'>
            /// </param>
            /// <param name='contracts'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ApiErc20BalanceGetErc20BalanceByAddressPostAsync(this IEthereumSamuraiApi operations, string address, IList<string> contracts = default(IList<string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiErc20BalanceGetErc20BalanceByAddressPostWithHttpMessagesAsync(address, contracts, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
<<<<<<< HEAD
            /// <param name='contractAddress'>
            /// </param>
            public static object ApiErc20TokenByContractAddressGet(this IEthereumSamuraiApi operations, string contractAddress)
            {
                return operations.ApiErc20TokenByContractAddressGetAsync(contractAddress).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='contractAddress'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ApiErc20TokenByContractAddressGetAsync(this IEthereumSamuraiApi operations, string contractAddress, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiErc20TokenByContractAddressGetWithHttpMessagesAsync(contractAddress, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='query'>
            /// </param>
            /// <param name='count'>
            /// </param>
            /// <param name='start'>
            /// </param>
            public static object ApiErc20TokenGet(this IEthereumSamuraiApi operations, string query = default(string), int? count = default(int?), int? start = default(int?))
            {
                return operations.ApiErc20TokenGetAsync(query, count, start).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='query'>
            /// </param>
            /// <param name='count'>
            /// </param>
            /// <param name='start'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ApiErc20TokenGetAsync(this IEthereumSamuraiApi operations, string query = default(string), int? count = default(int?), int? start = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiErc20TokenGetWithHttpMessagesAsync(query, count, start, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='start'>
            /// </param>
            /// <param name='count'>
            /// </param>
            public static object ApiErc20TransferHistoryGetErc20TransfersPost(this IEthereumSamuraiApi operations, GetErc20TransferHistoryRequest request = default(GetErc20TransferHistoryRequest), int? start = default(int?), int? count = default(int?))
            {
                return operations.ApiErc20TransferHistoryGetErc20TransfersPostAsync(request, start, count).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='start'>
            /// </param>
            /// <param name='count'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ApiErc20TransferHistoryGetErc20TransfersPostAsync(this IEthereumSamuraiApi operations, GetErc20TransferHistoryRequest request = default(GetErc20TransferHistoryRequest), int? start = default(int?), int? count = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiErc20TransferHistoryGetErc20TransfersPostWithHttpMessagesAsync(request, start, count, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
=======
>>>>>>> Erc20 balance request added to Etherium Samurai API
            /// <param name='transactionHash'>
            /// </param>
            public static object ApiInternalMessagesTxHashByTransactionHashGet(this IEthereumSamuraiApi operations, string transactionHash)
            {
                return operations.ApiInternalMessagesTxHashByTransactionHashGetAsync(transactionHash).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='transactionHash'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ApiInternalMessagesTxHashByTransactionHashGetAsync(this IEthereumSamuraiApi operations, string transactionHash, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiInternalMessagesTxHashByTransactionHashGetWithHttpMessagesAsync(transactionHash, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='address'>
            /// </param>
            /// <param name='startBlock'>
            /// </param>
            /// <param name='stopBlock'>
            /// </param>
            /// <param name='start'>
            /// </param>
            /// <param name='count'>
            /// </param>
            public static object ApiInternalMessagesByAddressGet(this IEthereumSamuraiApi operations, string address, long? startBlock = default(long?), long? stopBlock = default(long?), int? start = default(int?), int? count = default(int?))
            {
                return operations.ApiInternalMessagesByAddressGetAsync(address, startBlock, stopBlock, start, count).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='address'>
            /// </param>
            /// <param name='startBlock'>
            /// </param>
            /// <param name='stopBlock'>
            /// </param>
            /// <param name='start'>
            /// </param>
            /// <param name='count'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ApiInternalMessagesByAddressGetAsync(this IEthereumSamuraiApi operations, string address, long? startBlock = default(long?), long? stopBlock = default(long?), int? start = default(int?), int? count = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiInternalMessagesByAddressGetWithHttpMessagesAsync(address, startBlock, stopBlock, start, count, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void ApiSystemIsAliveGet(this IEthereumSamuraiApi operations)
            {
                operations.ApiSystemIsAliveGetAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiSystemIsAliveGetAsync(this IEthereumSamuraiApi operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiSystemIsAliveGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='transactionHash'>
            /// </param>
            public static object ApiTransactionTxHashByTransactionHashGet(this IEthereumSamuraiApi operations, string transactionHash)
            {
                return operations.ApiTransactionTxHashByTransactionHashGetAsync(transactionHash).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='transactionHash'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ApiTransactionTxHashByTransactionHashGetAsync(this IEthereumSamuraiApi operations, string transactionHash, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiTransactionTxHashByTransactionHashGetWithHttpMessagesAsync(transactionHash, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='address'>
            /// </param>
            /// <param name='start'>
            /// </param>
            /// <param name='count'>
            /// </param>
            public static object ApiTransactionByAddressGet(this IEthereumSamuraiApi operations, string address, int? start = default(int?), int? count = default(int?))
            {
                return operations.ApiTransactionByAddressGetAsync(address, start, count).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='address'>
            /// </param>
            /// <param name='start'>
            /// </param>
            /// <param name='count'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ApiTransactionByAddressGetAsync(this IEthereumSamuraiApi operations, string address, int? start = default(int?), int? count = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiTransactionByAddressGetWithHttpMessagesAsync(address, start, count, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='blockNumber'>
            /// </param>
            public static object ApiTransactionBlockNumberByBlockNumberGet(this IEthereumSamuraiApi operations, long blockNumber)
            {
                return operations.ApiTransactionBlockNumberByBlockNumberGetAsync(blockNumber).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='blockNumber'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ApiTransactionBlockNumberByBlockNumberGetAsync(this IEthereumSamuraiApi operations, long blockNumber, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiTransactionBlockNumberByBlockNumberGetWithHttpMessagesAsync(blockNumber, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='blockHash'>
            /// </param>
            public static object ApiTransactionBlockHashByBlockHashGet(this IEthereumSamuraiApi operations, string blockHash)
            {
                return operations.ApiTransactionBlockHashByBlockHashGetAsync(blockHash).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='blockHash'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ApiTransactionBlockHashByBlockHashGetAsync(this IEthereumSamuraiApi operations, string blockHash, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiTransactionBlockHashByBlockHashGetWithHttpMessagesAsync(blockHash, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
