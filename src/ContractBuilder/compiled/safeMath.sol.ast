PragmaDirective
   Source: "pragma solidity ^0.4.9;"
ContractDefinition "SafeMath"
   Source: "contract SafeMath {\n  uint256 constant public MAX_UINT256 =\n    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n\n  function safeAdd (uint256 x, uint256 y)\n  constant internal\n  returns (uint256 z) {\n    if (x > MAX_UINT256 - y) throw;\n    return x + y;\n  }\n\n  function safeSub (uint256 x, uint256 y)\n  constant internal\n  returns (uint256 z) {\n    if (x < y) throw;\n    return x - y;\n  }\n\n  function safeMul (uint256 x, uint256 y)\n  constant internal\n  returns (uint256 z) {\n    if (y == 0) return 0;\n    if (x > MAX_UINT256 / y) throw;\n    return x * y;\n  }\n}"
  VariableDeclaration "MAX_UINT256"
     Type: uint256
     Source: "uint256 constant public MAX_UINT256 =\n    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
       Type: int_const 115792089237316195423570985008687907853269984665640564039457584007913129639935
       Source: "0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
  FunctionDefinition "safeAdd" - const
     Source: "function safeAdd (uint256 x, uint256 y)\n  constant internal\n  returns (uint256 z) {\n    if (x > MAX_UINT256 - y) throw;\n    return x + y;\n  }"
    ParameterList
       Source: "(uint256 x, uint256 y)"
      VariableDeclaration "x"
         Type: uint256
         Source: "uint256 x"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "y"
         Type: uint256
         Source: "uint256 y"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: "(uint256 z)"
      VariableDeclaration "z"
         Type: uint256
         Source: "uint256 z"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\n    if (x > MAX_UINT256 - y) throw;\n    return x + y;\n  }"
      IfStatement
         Source: "if (x > MAX_UINT256 - y) throw"
        BinaryOperation using operator >
           Type: bool
           Source: "x > MAX_UINT256 - y"
          Identifier x
             Type: uint256
             Source: "x"
          BinaryOperation using operator -
             Type: uint256
             Source: "MAX_UINT256 - y"
            Identifier MAX_UINT256
               Type: uint256
               Source: "MAX_UINT256"
            Identifier y
               Type: uint256
               Source: "y"
        Throw
           Source: "throw"
      Return
         Source: "return x + y"
        BinaryOperation using operator +
           Type: uint256
           Source: "x + y"
          Identifier x
             Type: uint256
             Source: "x"
          Identifier y
             Type: uint256
             Source: "y"
  FunctionDefinition "safeSub" - const
     Source: "function safeSub (uint256 x, uint256 y)\n  constant internal\n  returns (uint256 z) {\n    if (x < y) throw;\n    return x - y;\n  }"
    ParameterList
       Source: "(uint256 x, uint256 y)"
      VariableDeclaration "x"
         Type: uint256
         Source: "uint256 x"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "y"
         Type: uint256
         Source: "uint256 y"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: "(uint256 z)"
      VariableDeclaration "z"
         Type: uint256
         Source: "uint256 z"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\n    if (x < y) throw;\n    return x - y;\n  }"
      IfStatement
         Source: "if (x < y) throw"
        BinaryOperation using operator <
           Type: bool
           Source: "x < y"
          Identifier x
             Type: uint256
             Source: "x"
          Identifier y
             Type: uint256
             Source: "y"
        Throw
           Source: "throw"
      Return
         Source: "return x - y"
        BinaryOperation using operator -
           Type: uint256
           Source: "x - y"
          Identifier x
             Type: uint256
             Source: "x"
          Identifier y
             Type: uint256
             Source: "y"
  FunctionDefinition "safeMul" - const
     Source: "function safeMul (uint256 x, uint256 y)\n  constant internal\n  returns (uint256 z) {\n    if (y == 0) return 0;\n    if (x > MAX_UINT256 / y) throw;\n    return x * y;\n  }"
    ParameterList
       Source: "(uint256 x, uint256 y)"
      VariableDeclaration "x"
         Type: uint256
         Source: "uint256 x"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "y"
         Type: uint256
         Source: "uint256 y"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: "(uint256 z)"
      VariableDeclaration "z"
         Type: uint256
         Source: "uint256 z"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\n    if (y == 0) return 0;\n    if (x > MAX_UINT256 / y) throw;\n    return x * y;\n  }"
      IfStatement
         Source: "if (y == 0) return 0"
        BinaryOperation using operator ==
           Type: bool
           Source: "y == 0"
          Identifier y
             Type: uint256
             Source: "y"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
        Return
           Source: "return 0"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
      IfStatement
         Source: "if (x > MAX_UINT256 / y) throw"
        BinaryOperation using operator >
           Type: bool
           Source: "x > MAX_UINT256 / y"
          Identifier x
             Type: uint256
             Source: "x"
          BinaryOperation using operator /
             Type: uint256
             Source: "MAX_UINT256 / y"
            Identifier MAX_UINT256
               Type: uint256
               Source: "MAX_UINT256"
            Identifier y
               Type: uint256
               Source: "y"
        Throw
           Source: "throw"
      Return
         Source: "return x * y"
        BinaryOperation using operator *
           Type: uint256
           Source: "x * y"
          Identifier x
             Type: uint256
             Source: "x"
          Identifier y
             Type: uint256
             Source: "y"
